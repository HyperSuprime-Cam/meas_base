for alg in SdssShape ApertureFlux Blendedness GaussianCentroid GaussianFlux NaiveCentroid PeakLikelihoodFlux PsfFlux SdssCentroid; do
    echo $alg
    export enum=`cat $alg.enum`
    sed -ne "1,/class ${alg}Algorithm/p" orig/${alg}.h > ${alg}.h
    echo "public:" >> ${alg}.h
    cat include.add >> ${alg}.h
    if [ ${alg} == "ApertureFlux" ]; then
#        echo "    static FlagDefinitions const & getFlagDefinitions();" >> ${alg}.h
        echo "    static unsigned int const N_FLAGS = 3;" >> ${alg}.h
    fi
    if [ ${alg} == "SdssShape" ]; then
#        echo "    static FlagDefinitions const & getFlagDefinitions();" >> ${alg}.h
        echo "    static unsigned int const N_FLAGS = 6;" >> ${alg}.h
    fi
    for flag in $enum; do
        echo "    static FlagDefinition const ${flag};" >> ${alg}.h
    done
    echo "" >> ${alg}.h
    sed -ne "/typedef/,100000p" orig/${alg}.h | sed -e "/    enum {/,/    };/d" | sed -e "/getFlagDefinitions();/d" >> ${alg}.h

    if [ ${alg} == "ApertureFlux" ]; then
        sed -e 's/bool getFlag(ApertureFluxAlgorithm::FlagBits bit) const { return _flags\[bit\]; }/bool getFlag(unsigned int index) const { return _flags[index]; }/' ${alg}.h > temp
        sed -e 's/setFlag(ApertureFluxAlgorithm::FlagBits bit, bool value=true) { _flags\[bit\] = /setFlag(unsigned int index, bool value=true) { _flags[index] = /' temp > temp2
        sed -e 's/unsetFlag(ApertureFluxAlgorithm::FlagBits bit) { _flags\[bit\]/unsetFlag(unsigned int index) { _flags[index]/' temp2 > ${alg}.h  
    fi

    cp orig/${alg}.cc ${alg}.cc
    for flag in $enum; do
        sed -e "s/etFlag(\(${alg}Algorithm::\|\)${flag}/etFlag(\1${flag}.number/" ${alg}.cc > temp
        sed -e "s/flagDefs\./getFlagDefinitions()./g" temp > temp2
        sed -e "s/flags\[\(${alg}Algorithm::\|\)${flag}\]/flags[\1${flag}.number]/" temp2 > temp
        sed -e 's/etValue(\([^,]*\), '"\(${arg}Algorithm::\|\)${flag}/etValue(\1, \2${flag}.number/" temp > temp2
        sed -e "s/  \(${alg}Algorithm::\|\)${flag}/  \1${flag}.number/" temp2 > temp
        sed -e 's/_*'"flagHandler.getDefinition(\(${alg}Algorithm::\|\)$flag).doc/\1${flag}.doc/" temp > ${alg}.cc 
    done
    export target="namespace lsst { namespace meas { namespace base {"
    sed -e "s/XX/${alg}/" ${alg}.flagDefs > flagDefs
    for flag in $enum; do
        sed -e "1,/YY/s/YY/${flag} = flagDefinitions.add/" flagDefs > temp
        cp temp flagDefs
    done
    sed -ne "1,/${target}/p" ${alg}.cc > temp
    cat flagDefs >> temp
    sed -ne "/${target}/,10000p" ${alg}.cc | grep -v "$target" >> temp
    sed -e '/static std::array<FlagDefinition/,/}}/d' temp > temp2
    sed -e '/^std::array<FlagDefinition/, /^}/d' temp2 > temp
    sed -e 's/\(.*::\|\)getFlagDefinitions().begin(), .*getFlagDefinitions().*)/\1getFlagDefinitions())/' temp | sed -e "s/s()),/s())),/" > temp2
    sed -e 's/FAILURE = flagDefinitions.add("flag",.*);/FAILURE = flagDefinitions.addFailureFlag();/' temp2 > ${alg}.cc

    export hasauto=`grep -c "auto flag =.*getFlag" ${alg}.cc`
    echo "hasauto = $hasauto"
    if [ "$hasauto" != 0 ] ; then
        if [ ${alg} == "ApertureFlux" ]; then
            export addfile="ApertureFlux.transform.add"
            export target='auto flag = ApertureFluxAlgorithm::getFlagDefinitions().begin()'
        else
            export addfile="transform.add"
            export target='auto flag = getFlagDefinitions().begin()'
        fi
        sed -ne "1,/$target/p" ${alg}.cc | grep -v "$target" > temp
        sed -e "s/XX/${alg}Algorithm/" $addfile >> temp
        sed -ne '/flag->name.*key);/,10000p' ${alg}.cc | grep -v 'flag->name.*key);' >> temp
        mv temp ${alg}.cc
    fi

done

